cmake_minimum_required(VERSION 2.6)


PROJECT(AGMDENGINE)
SET(AGMD_VERSION 0.0.5)

IF(COMMAND cmake_policy)
   cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

#SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")

#SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")

set(EXECUTABLE_OUTPUT_PATH ${AGMDENGINE_SOURCE_DIR}/bin/${CMAKE_BUILD_TYPE})
set(LIBRARY_OUTPUT_PATH ${AGMDENGINE_SOURCE_DIR}/lib/${CMAKE_BUILD_TYPE})

set(CMAKE_CONFIGURATION_TYPES "Debug;Release;DebProfile;RelProfile" CACHE STRING "" FORCE)

SET(CMAKE_CXX_FLAGS_RELPROFILE "${CMAKE_CXX_FLAGS_RELEASE} -DPROFILING_TIME")
SET(CMAKE_CXX_FLAGS_DEBPROFILE "${CMAKE_CXX_FLAGS_DEBUG}  -DPROFILING_TIME")

SET(CMAKE_SHARED_LINKER_FLAGS_DEBPROFILE "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")

SET(CMAKE_SHARED_LINKER_FLAGS_RELPROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")

SET(CMAKE_EXE_LINKER_FLAGS_RELPROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")

SET(CMAKE_EXE_LINKER_FLAGS_DEBPROFILE "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")

IF(MSVC)
		FIND_PATH(DIRECTX_SDK_BASE_DIR Include/D3D11.h PATH  $ENV{DXSDK_DIR} )
		IF(DIRECTX_SDK_BASE_DIR)
			OPTION(USE_DX11 "Use DirectX 11"	ON)
		ELSE()
			OPTION(USE_DX11 "Use DirectX 11"	OFF)
		ENDIF()
	
		FIND_PATH(AMD_OPENCL_BASE_DIR include/CL/cl.h PATH  $ENV{ATISTREAMSDKROOT} $ENV{AMDAPPSDKROOT} )
		IF(AMD_OPENCL_BASE_DIR)
			#AMD adds an extras slash at the end of the ATISTREAMSDKROOT variable
			SET(AMD_OPENCL_INCLUDES ${AMD_OPENCL_BASE_DIR}/include )
			MESSAGE("AMD OPENCL SDK FOUND")
			IF (CMAKE_CL_64)
				SET(CMAKE_ATISTREAMSDK_LIBPATH 		${AMD_OPENCL_BASE_DIR}/lib/x86_64 )
			ELSE(CMAKE_CL_64)
				SET(CMAKE_ATISTREAMSDK_LIBPATH		${AMD_OPENCL_BASE_DIR}/lib/x86 )
			ENDIF(CMAKE_CL_64)
			SET(CMAKE_ATISTREAMSDK_LIBRARY		${CMAKE_ATISTREAMSDK_LIBPATH}/OpenCL.lib )
			OPTION(BUILD_AMD_OPENCL_DEMOS "Build OpenCL demos for AMD (GPU or CPU)"	ON)
			IF (CMAKE_CL_64)
				SET(CMAK_GLEW_LIBRARY
					${BULLET_PHYSICS_SOURCE_DIR}/Glut/glew64s.lib		)
			ELSE(CMAKE_CL_64)
				SET(CMAK_GLEW_LIBRARY		${BULLET_PHYSICS_SOURCE_DIR}/Glut/glew32s.lib		)
			ENDIF(CMAKE_CL_64)
		ELSE()
			OPTION(BUILD_AMD_OPENCL_DEMOS "Build OpenCL demos for AMD (GPU or CPU)"	OFF)
		ENDIF()
		
		FIND_PATH(INTEL_OPENCL_BASE_DIR include/CL/cl.h PATH  $ENV{INTELOCLSDKROOT} )
		IF(INTEL_OPENCL_BASE_DIR)
			SET(INTEL_OPENCL_INCLUDES ${INTEL_OPENCL_BASE_DIR}/include )
			MESSAGE("INTEL OPENCL SDK FOUND")
			MESSAGE(${INTEL_OPENCL_INCLUDES})
			IF (CMAKE_CL_64)
				SET(CMAKE_INTELOCLSDK_LIBPATH 		${INTEL_OPENCL_BASE_DIR}/lib/x64 )
			ELSE(CMAKE_CL_64)
				SET(CMAKE_INTELOCLSDK_LIBPATH		${INTEL_OPENCL_BASE_DIR}/lib/x86 )
			ENDIF(CMAKE_CL_64)
			SET(INTEL_OPENCL_LIBRARIES ${CMAKE_INTELOCLSDK_LIBPATH}/OpenCL.lib)
			OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"	ON)
		ELSE()
			OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"	OFF)
		ENDIF()
		
		FIND_PATH(NVIDIA_OPENCL_BASE_DIR include/CL/cl.h PATH  $ENV{CUDA_PATH} )
		IF(NVIDIA_OPENCL_BASE_DIR)
			SET(NVIDIA_OPENCL_INCLUDES ${NVIDIA_OPENCL_BASE_DIR}/include )
			MESSAGE("NVIDIA OPENCL SDK FOUND")
			MESSAGE(${NVIDIA_OPENCL_INCLUDES})
			IF (CMAKE_CL_64)
				SET(CMAKE_NVSDKCOMPUTE_LIBPATH		${NVIDIA_OPENCL_BASE_DIR}/lib/x64 )
			ELSE(CMAKE_CL_64)
				SET(CMAKE_NVSDKCOMPUTE_LIBPATH		${NVIDIA_OPENCL_BASE_DIR}/lib/Win32	)
			ENDIF(CMAKE_CL_64)
		SET(NVIDIA_OPENCL_LIBRARIES		${CMAKE_NVSDKCOMPUTE_LIBPATH}/OpenCL.lib)
		
			OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	ON)
		ELSE()
			OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	OFF)
		ENDIF()
	ELSE(MSVC)
		FIND_PATH(AMD_OPENCL_BASE_DIR include/CL/cl.h PATH  $ENV{ATISTREAMSDKROOT} $ENV{AMDAPPSDKROOT} )
		IF(AMD_OPENCL_BASE_DIR)
			#AMD adds an extras slash at the end of the ATISTREAMSDKROOT variable
			SET(AMD_OPENCL_INCLUDES ${AMD_OPENCL_BASE_DIR}/include )
			MESSAGE("AMD OPENCL SDK FOUND")
			MESSAGE(${AMD_OPENCL_INCLUDES})
			IF (CMAKE_CL_64)
				SET(CMAKE_ATISTREAMSDK_LIBPATH 		${AMD_OPENCL_BASE_DIR}/lib/x86_64 )
			ELSE(CMAKE_CL_64)
				SET(CMAKE_ATISTREAMSDK_LIBPATH		${AMD_OPENCL_BASE_DIR}/lib/x86 )
			ENDIF(CMAKE_CL_64)
			OPTION(BUILD_AMD_OPENCL_DEMOS "Build OpenCL demos for AMD (GPU or CPU)"	ON)
			SET(CMAKE_ATISTREAMSDK_LIBRARY		OpenCL )
		ELSE()
			OPTION(BUILD_AMD_OPENCL_DEMOS "Build OpenCL demos for AMD (GPU or CPU)"	OFF)
		ENDIF(AMD_OPENCL_BASE_DIR)
		
    FIND_PATH(INTEL_OPENCL_INCLUDES CL/cl.h)
    FIND_PATH(INTEL_OPENCL_ICD_CFG intelocl64.icd /etc/OpenCL/vendors)
    FIND_LIBRARY(INTEL_OPENCL_LIBRARIES OpenCL PATH /usr/lib64)
    IF (INTEL_OPENCL_INCLUDES AND INTEL_OPENCL_LIBRARIES AND INTEL_OPENCL_ICD_CFG)
            MESSAGE("INTEL OPENCL SDK FOUND")
            MESSAGE(${INTEL_OPENCL_LIBRARIES})
            OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"        ON)
    ELSE ()
            MESSAGE("INTEL OPENCL NOT FOUND")
            OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"        OFF)
    ENDIF ()


		FIND_PATH(NVIDIA_OPENCL_INCLUDES CL/cl.h)
    FIND_PATH(NVIDIA_OPENCL_ICD_CFG nvidia.icd /etc/OpenCL/vendors)
    FIND_LIBRARY(NVIDIA_OPENCL_LIBRARIES OpenCL PATH /usr/lib64 /usr/local/lib)
    IF (NVIDIA_OPENCL_INCLUDES AND NVIDIA_OPENCL_LIBRARIES AND NVIDIA_OPENCL_ICD_CFG)
                MESSAGE("NVidia OPENCL FOUND")
			MESSAGE(${NVIDIA_OPENCL_LIBRARIES})
			OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	ON)
		ELSE ()
	                MESSAGE("NVidia OPENCL NOT FOUND")
			OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	OFF)
		ENDIF ()
	ENDIF(MSVC)

SUBDIRS(src)

